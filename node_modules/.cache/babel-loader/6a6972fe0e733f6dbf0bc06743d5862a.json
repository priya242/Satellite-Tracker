{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js\";\nimport React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEtop from \"./nevents/NEtop\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEheatmap from \"./nevents/NEheatmap\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n  constructor() {\n    super();\n\n    this.daysChange = event => {\n      if (event.key === \"Enter\") {\n        this.setState({\n          days: event.target.value\n        });\n        this.fetchData(event.target.value);\n      }\n    };\n\n    this.fetchData = days => {\n      // fetch(\n      //   `https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent(\n      //     days\n      //   )}&status=open`\n      // )\n      //   .then((response) => response.json())\n      //   .then((data) => {\n      //     data = data.events;\n      //   })\n      //   .catch((error) => {\n      //     console.log(\"Request failed: \", error);\n      //   });\n      let data = require(\"./nevents/tempin\");\n\n      let l_count = 0;\n      let l_bar = {};\n      let l_worlddata = [];\n      let l_date_mag = [];\n      let l_catid = {}; //category with numeric catid for heatmap\n\n      let l_catid_count = 0;\n      let l_catdate = {};\n\n      for (let event of data) {\n        l_count++; //total number of events\n\n        let title = event.title;\n        let categories = \"\";\n        let current_cat = []; //categories for the single event in the loop\n        //CATEGORIES information for each child component\n\n        for (let category of event.categories) {\n          //world + area\n          categories += category.id + \" \"; //BAR\n\n          if (category.id in l_bar) {\n            l_bar[category.id]++;\n          } else {\n            l_bar[category.id] = 1;\n          } //HEATMAP\n\n\n          if (!(category.id in l_catid)) {\n            l_catid_count += 1;\n            l_catid[category.id] = l_count; // {category1: 1, category2: 2, category3: 3 ... }\n          }\n\n          current_cat.push(category.id);\n        } //AREA Map For DATE and MAGNITUDE\n\n\n        let date_mag = {\n          title: title,\n          source: {\n            id: event.sources[0].id,\n            url: event.sources[0].url\n          },\n          categories: categories.trim(),\n          geometry: event.geometry\n        };\n        l_date_mag.push(date_mag); //WORLD MAP DATA per lat,long\n        //HEATMAP\n\n        for (let geometry of event.geometry) {\n          //world\n          //one event one location\n          if (geometry.type === \"Point\") {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lat\"] = geometry.coordinates[1];\n            worldevent[\"lon\"] = geometry.coordinates[0];\n            worldevent[\"date\"] = geometry.date;\n            l_worlddata.push(worldevent);\n          } //one event multiple locations\n          else {\n              for (let coord of geometry.coordinates) {\n                let worldevent = {};\n                worldevent[\"title\"] = title;\n                worldevent[\"type\"] = categories.trim();\n                worldevent[\"lon\"] = coord[0];\n                worldevent[\"lat\"] = coord[1];\n                l_worlddata.push(worldevent);\n              }\n            } //heatmap\n\n\n          for (let c of current_cat) {\n            if (geometry.date in l_catdate) {\n              if (c == Object.keys(l_catdate[geometry.date])[0]) {\n                l_catdate[geometry.date].category += 1;\n              } else {\n                l_catdate.push();\n              }\n            }\n          }\n        }\n      }\n\n      l_bar = Object.keys(l_bar).map(key => [key, l_bar[key]]).sort((first, second) => second[1] - first[1]).slice(0, 4);\n      this.setState({\n        bar: l_bar,\n        count: l_count,\n        worlddata: l_worlddata,\n        area_data_mag: l_date_mag\n      });\n    };\n\n    this.state = {\n      count: 0,\n      days: 30,\n      bar: [],\n      worlddata: [],\n      area_data_mag: [],\n      bubble: []\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.daysChange = this.daysChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Natural Events\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, \"Information for the last\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      defaultValue: this.state.days,\n      onKeyDown: this.daysChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }), \"days\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number_events nevents_item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"Number of events: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, this.state.count)), /*#__PURE__*/React.createElement(NEtop, {\n      events: this.state.bar,\n      total: this.state.count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(NEworldmap, {\n      worlddata: this.state.worlddata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NEeach, {\n      area_data_mag: this.state.area_data_mag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NEheatmap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default NEvents;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js"],"names":["React","NEworldmap","NEtop","NEeach","NEheatmap","NEvents","Component","constructor","daysChange","event","key","setState","days","target","value","fetchData","data","require","l_count","l_bar","l_worlddata","l_date_mag","l_catid","l_catid_count","l_catdate","title","categories","current_cat","category","id","push","date_mag","source","sources","url","trim","geometry","type","worldevent","coordinates","date","coord","c","Object","keys","map","sort","first","second","slice","bar","count","worlddata","area_data_mag","state","bubble","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEtop from \"./nevents/NEtop\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEheatmap from \"./nevents/NEheatmap\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      days: 30,\n      bar: [],\n      worlddata: [],\n      area_data_mag: [],\n      bubble: [],\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.daysChange = this.daysChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  daysChange = (event) => {\n    if (event.key === \"Enter\") {\n      this.setState({ days: event.target.value });\n      this.fetchData(event.target.value);\n    }\n  };\n\n  fetchData = (days) => {\n    // fetch(\n    //   `https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent(\n    //     days\n    //   )}&status=open`\n    // )\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     data = data.events;\n    //   })\n    //   .catch((error) => {\n    //     console.log(\"Request failed: \", error);\n    //   });\n    let data = require(\"./nevents/tempin\");\n    let l_count = 0;\n    let l_bar = {};\n    let l_worlddata = [];\n    let l_date_mag = [];\n    let l_catid = {}; //category with numeric catid for heatmap\n    let l_catid_count = 0;\n    let l_catdate = {};\n\n    for (let event of data) {\n      l_count++; //total number of events\n      let title = event.title;\n      let categories = \"\";\n      let current_cat = []; //categories for the single event in the loop\n\n      //CATEGORIES information for each child component\n      for (let category of event.categories) {\n        //world + area\n        categories += category.id + \" \";\n        //BAR\n        if (category.id in l_bar) {\n          l_bar[category.id]++;\n        } else {\n          l_bar[category.id] = 1;\n        }\n        //HEATMAP\n        if (!(category.id in l_catid)) {\n          l_catid_count += 1;\n          l_catid[category.id] = l_count; // {category1: 1, category2: 2, category3: 3 ... }\n        }\n        current_cat.push(category.id);\n      }\n\n      //AREA Map For DATE and MAGNITUDE\n      let date_mag = {\n        title: title,\n        source: { id: event.sources[0].id, url: event.sources[0].url },\n        categories: categories.trim(),\n        geometry: event.geometry,\n      };\n      l_date_mag.push(date_mag);\n\n      //WORLD MAP DATA per lat,long\n      //HEATMAP\n      for (let geometry of event.geometry) {\n        //world\n        //one event one location\n        if (geometry.type === \"Point\") {\n          let worldevent = {};\n          worldevent[\"title\"] = title;\n          worldevent[\"type\"] = categories.trim();\n          worldevent[\"lat\"] = geometry.coordinates[1];\n          worldevent[\"lon\"] = geometry.coordinates[0];\n          worldevent[\"date\"] = geometry.date;\n          l_worlddata.push(worldevent);\n        }\n        //one event multiple locations\n        else {\n          for (let coord of geometry.coordinates) {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lon\"] = coord[0];\n            worldevent[\"lat\"] = coord[1];\n            l_worlddata.push(worldevent);\n          }\n        }\n\n        //heatmap\n        for (let c of current_cat) {\n          if (geometry.date in l_catdate) {\n            if (c == Object.keys(l_catdate[geometry.date])[0]) {\n              l_catdate[geometry.date].category += 1;\n            } else {\n              l_catdate.push();\n            }\n          }\n        }\n      }\n    }\n\n    l_bar = Object.keys(l_bar)\n      .map((key) => [key, l_bar[key]])\n      .sort((first, second) => second[1] - first[1])\n      .slice(0, 4);\n\n    this.setState({\n      bar: l_bar,\n      count: l_count,\n      worlddata: l_worlddata,\n      area_data_mag: l_date_mag,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"nevents\">\n        <div className=\"navbar\">\n          <span>\n            <b>Natural Events</b>\n          </span>\n          <div className=\"nav-controls\">\n            Information for the last{\" \"}\n            <input\n              type=\"number\"\n              defaultValue={this.state.days}\n              onKeyDown={this.daysChange}\n            ></input>\n            days\n          </div>\n        </div>\n        <div className=\"nevents_container\">\n          <div className=\"number_events nevents_item\">\n            <div className=\"number\">\n              Number of events: <br />\n              <span>{this.state.count}</span>\n            </div>\n            {/* {this.state.donuts.length != 0\n              ? this.state.donuts\n                  .slice(0, 4)\n                  .map((donut) => (\n                    <NEeach event={donut} total={this.state.count} />\n                  ))\n              : \"\"} */}\n            <NEtop events={this.state.bar} total={this.state.count} />\n          </div>\n          <NEworldmap worlddata={this.state.worlddata} />\n          <NEeach area_data_mag={this.state.area_data_mag} />\n          <NEheatmap />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NEvents;\n"]},"metadata":{},"sourceType":"module"}