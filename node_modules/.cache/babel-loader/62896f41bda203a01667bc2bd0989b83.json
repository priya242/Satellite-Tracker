{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js\";\nimport React from \"react\";\nimport Chart from \"./components/Chart\";\nimport BarChart from \"./components/BarChart\";\nimport WorldMap from \"./components/WorldMap\";\nimport \"./style.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      Data: [],\n      SatCat: [],\n      launchDate: [],\n      isLoaded: false\n    };\n  }\n\n  fetchData() {\n    const url = \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat(); // const url1 = \"https://uphere-space1.p.rapidapi.com/satellite/list?page=1\";\n\n    const url1 = \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/0/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\"; //--------------------------------------fetching url-------------------------------------------------\n\n    fetch(url).then(response => response.json()).then(data => {\n      return data;\n    }).then(data => {\n      this.setState({\n        nasa: data.collection.items[1].href,\n        isLoaded: true\n      });\n    }); //---------------------------------------fetching url1-------------------\n\n    /**fetch(url1, {\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"uphere-space1.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"7c38e0936bmsh43070bf163c0855p15038cjsn373b4d98e3a6\"\n    }\n    })\n    .then((response) => response.json())\n    .then((data) => {\n        //return data;\n        console.log(data)\n      })\n    .catch(err => {\n    console.log(err);\n    }); **/\n\n    fetch(url1).then(response => response.json()).then(data => {\n      return data; // var dt = data.above[0].launchDate;\n      // var dtobject = new Date(dt)\n      // var y = dtobject.getFullYear();\n      //  console.log(y);\n    }).then(data => {\n      this.setState({\n        launchDate: data.above\n      });\n    }); //---------------------------------------fetching urls----------------------------\n\n    Promise.all(urls.map(url => fetch(url))).then(responses => Promise.all(responses.map(r => r.json()))).then(values => {\n      return values;\n    }).then(data => {\n      this.setState({\n        isLoaded: true,\n        Data: data\n      });\n    }); // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n\n    for (let id = 2; id <= 13; id++) {\n      let url1 = \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" + id + \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n\n    return urls; //console.log(urls)\n  } //--------------------------------------render and return--------------------------------\n\n\n  render() {\n    const {\n      nasa,\n      Data,\n      isLoaded,\n      launchDate\n    } = this.state; // console.log(Data)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, \"Satellite Tracker\"), !isLoaded && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      controls: true,\n      muted: true,\n      loop: true,\n      src: nasa,\n      type: \"video/mp4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Chart, {\n      DataSet: Data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(BarChart, {\n      YearData: launchDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WorldMap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js"],"names":["React","Chart","BarChart","WorldMap","App","Component","constructor","props","state","nasa","Data","SatCat","launchDate","isLoaded","fetchData","url","urls","loadSat","url1","fetch","then","response","json","data","setState","collection","items","href","above","Promise","all","map","responses","r","values","componentDidMount","id","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chart from \"./components/Chart\";\nimport BarChart from \"./components/BarChart\";\nimport WorldMap from \"./components/WorldMap\";\nimport \"./style.css\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      Data: [],\n      SatCat: [],\n      launchDate: [],\n      isLoaded: false,\n    };\n  }\n  fetchData() {\n    const url =\n      \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    // const url1 = \"https://uphere-space1.p.rapidapi.com/satellite/list?page=1\";\n    const url1 =\n      \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/0/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n    //--------------------------------------fetching url-------------------------------------------------\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        return data;\n      })\n      .then((data) => {\n        this.setState({\n          nasa: data.collection.items[1].href,\n          isLoaded: true,\n        });\n      });\n    //---------------------------------------fetching url1-------------------\n    /**fetch(url1, {\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"uphere-space1.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"7c38e0936bmsh43070bf163c0855p15038cjsn373b4d98e3a6\"\n    }\n  })\n  .then((response) => response.json())\n    .then((data) => {\n        //return data;\n        console.log(data)\n      })\n  .catch(err => {\n    console.log(err);\n  }); **/\n    fetch(url1)\n      .then((response) => response.json())\n      .then((data) => {\n       return data;\n       // var dt = data.above[0].launchDate;\n       // var dtobject = new Date(dt)\n       // var y = dtobject.getFullYear();\n      //  console.log(y);\n      })\n      .then((data) => {\n        this.setState({\n          launchDate: data.above,\n        });\n      });\n\n    //---------------------------------------fetching urls----------------------------\n    Promise.all(urls.map((url) => fetch(url)))\n      .then((responses) => Promise.all(responses.map((r) => r.json())))\n      .then((values) => {\n        return values;\n      })\n      .then((data) => {\n        this.setState({\n          isLoaded: true,\n          Data: data,\n        });\n      });\n\n    // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n    for (let id = 2; id <= 13; id++) {\n      let url1 =\n        \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" +\n        id +\n        \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n    return urls;\n    //console.log(urls)\n  }\n  //--------------------------------------render and return--------------------------------\n  render() {\n    const { nasa, Data, isLoaded, launchDate } = this.state;\n    // console.log(Data)\n    return (\n      <React.Fragment>\n        <h1>Satellite Tracker</h1>\n        {!isLoaded && <p>Loading...</p>}\n        <div className=\"video\">\n          <video autoPlay controls muted loop src={nasa} type=\"video/mp4\" />\n        </div>\n        <Chart DataSet={Data} />\n        <BarChart YearData={launchDate} />\n        <WorldMap />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}