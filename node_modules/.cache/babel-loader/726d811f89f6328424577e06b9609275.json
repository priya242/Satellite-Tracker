{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js\";\nimport React from \"react\";\nimport \"./style.css\";\nimport Chart from \"./components/Chart\"; //import Main from \"./components/Main\"\n\nimport WorldMap from \"./components/WorldMap\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      Data: [],\n      SatCat: [],\n      isLoaded: false\n    };\n  }\n\n  fetchData() {\n    const url = \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    const url1 = 'https://www.space-track.org/basicspacedata/query/class/satcat/predicates/OBJECT_ID,COUNTRY,%20desc/format/html/emptyresult/show'; //--------------------fetching url-------------------\n\n    fetch(url).then(response => response.json()).then(data => {\n      return data;\n    }).then(data => {\n      this.setState({\n        nasa: data.collection.items[1].href,\n        isLoaded: true\n      });\n    }); //--------------------fetching url1-------------------\n\n    fetch(url1, {\n      method: 'GET',\n      mode: 'no-cors'\n    }).then(response => response.json()).then(data => {\n      return data;\n    }).then(data => {\n      this.setState({\n        SatCat: data,\n        isLoaded: true\n      });\n      console.log(data);\n    }); //--------------------fetching urls----------------------------\n\n    Promise.all(urls.map(url => fetch(url))).then(responses => Promise.all(responses.map(r => r.json()))).then(values => {\n      return values;\n    }).then(data => {\n      this.setState({\n        isLoaded: true,\n        Data: data\n      });\n    }); // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n\n    for (let id = 2; id <= 13; id++) {\n      let url1 = \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" + id + \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n\n    return urls; //console.log(urls)\n  } //------------------render snd return--------------------\n\n\n  render() {\n    //const { nasa, satellites, category, isLoaded } = this.state;\n    const {\n      nasa,\n      Data,\n      isLoaded\n    } = this.state; // console.log(Data)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \"Satellite Tracker\"), !isLoaded && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      controls: true,\n      muted: true,\n      loop: true,\n      src: nasa,\n      type: \"video/mp4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Chart, {\n      DataSet: Data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js"],"names":["React","Chart","WorldMap","App","Component","constructor","props","state","nasa","Data","SatCat","isLoaded","fetchData","url","urls","loadSat","url1","fetch","then","response","json","data","setState","collection","items","href","method","mode","console","log","Promise","all","map","responses","r","values","componentDidMount","id","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport Chart from \"./components/Chart\"\n//import Main from \"./components/Main\"\nimport WorldMap  from \"./components/WorldMap\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      Data: [],\n      SatCat:[],\n      isLoaded: false,\n    };\n  }\n  fetchData() {\n    const url =\n      \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    const url1 = 'https://www.space-track.org/basicspacedata/query/class/satcat/predicates/OBJECT_ID,COUNTRY,%20desc/format/html/emptyresult/show'\n    //--------------------fetching url-------------------\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        return data;\n      })\n      .then((data) => {\n        this.setState({\n          nasa: data.collection.items[1].href,\n          isLoaded: true,\n        });\n      });\n  //--------------------fetching url1-------------------\n      fetch(url1, {\n        method:'GET',\n        mode: 'no-cors'})\n      .then((response) => response.json())\n      .then((data) => {\n        return data;\n      })\n      .then((data) => {\n        this.setState({\n          SatCat: data,\n          isLoaded: true,\n        });\n        console.log(data)\n      });\n  //--------------------fetching urls----------------------------\n    Promise.all(urls.map((url) => fetch(url)))\n      .then((responses) => Promise.all(responses.map((r) => r.json())))\n      .then((values) => {\n        return values;\n      })\n      .then((data) => {\n        this.setState({\n          isLoaded: true,\n          Data: data,\n        });\n      });\n\n    // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n    for (let id = 2; id <= 13; id++) {\n      let url1 =\n        \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" +\n        id +\n        \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n    return urls;\n    //console.log(urls)\n  }\n  //------------------render snd return--------------------\n  render() {\n    //const { nasa, satellites, category, isLoaded } = this.state;\n    const { nasa, Data, isLoaded } = this.state;\n   // console.log(Data)\n    return (\n      <React.Fragment>\n        <h1>Satellite Tracker</h1>\n        {!isLoaded && <p>Loading...</p>}\n        <video autoPlay controls muted loop src={nasa} type=\"video/mp4\" />\n        <Chart DataSet = {Data} />\n        \n      </React.Fragment>\n    );\n    \n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}