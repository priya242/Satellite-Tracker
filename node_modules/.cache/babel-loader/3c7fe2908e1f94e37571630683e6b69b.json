{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js\";\nimport React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEgraph from \"./nevents/NEgraph\";\nimport events from \"./nevents/tempin\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n  constructor() {\n    super();\n\n    this.daysChange = event => {\n      if (event.key === \"Enter\") {\n        this.setState({\n          days: event.target.value\n        });\n        this.fetchData(this.state.days);\n      }\n    };\n\n    this.fetchData = days => {\n      // fetch(\n      //   \"https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent({days})}&status=open\"\n      // )\n      //   .then((response) => response.json())\n      //   .then((data) => {\n      //     console.log(data.events);\n      //   })\n      //   .catch((error) => {\n      //     console.log(\"Request failed: \", error);\n      //   });\n      let data = require(\"./nevents/tempin\");\n\n      let donutsdict = {};\n      let l_worlddata = [];\n      let l_count = 0;\n\n      for (let event of data) {\n        l_count++; //total number of events\n        //world map data\n\n        let title = event.title;\n        let categories = \"\"; //CATEGORIES information for each child component\n\n        for (let category of event.categories) {\n          //world\n          categories += category.id + \" \"; //donuts\n\n          if (category.id in donutsdict) {\n            donutsdict[category.id]++;\n          } else {\n            donutsdict[category.id] = 1;\n          }\n        }\n\n        for (let geometry of event.geometry) {\n          //world\n          //one event one location\n          if (geometry.type === \"Point\") {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lat\"] = geometry.coordinates[1];\n            worldevent[\"lon\"] = geometry.coordinates[0];\n            l_worlddata.push(worldevent);\n          } //one event multiple locations\n          else {\n              for (let coord of geometry.coordinates) {\n                let worldevent = {};\n                worldevent[\"title\"] = title;\n                worldevent[\"type\"] = categories.trim();\n                worldevent[\"lon\"] = coord[0];\n                worldevent[\"lat\"] = coord[1];\n                l_worlddata.push(worldevent);\n              }\n            }\n        }\n      }\n\n      let l_donuts = Object.keys(donutsdict).map(key => [key, donutsdict[key]]);\n      l_donuts.sort((first, second) => second[1] - first[1]);\n      this.setState({\n        donuts: l_donuts,\n        count: l_count,\n        worlddata: l_worlddata\n      });\n    };\n\n    this.state = {\n      count: 0,\n      days: 30,\n      donuts: [],\n      worlddata: []\n    }; // this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"Natural Events\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, \"Information for the last\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      defaultValue: this.state.days,\n      onKeyDown: this.daysChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), \"days\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number_events nevents_item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Number of events: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, this.state.count)), this.state.donuts.length != 0 ? this.state.donuts.slice(0, 4).map(donut => /*#__PURE__*/React.createElement(NEeach, {\n      event: donut,\n      total: this.state.count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents_world nevents_item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NEworldmap, {\n      worlddata: this.state.worlddata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default NEvents;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js"],"names":["React","NEworldmap","NEeach","NEgraph","events","NEvents","Component","constructor","daysChange","event","key","setState","days","target","value","fetchData","state","data","require","donutsdict","l_worlddata","l_count","title","categories","category","id","geometry","type","worldevent","trim","coordinates","push","coord","l_donuts","Object","keys","map","sort","first","second","donuts","count","worlddata","componentDidMount","render","length","slice","donut"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEgraph from \"./nevents/NEgraph\";\nimport events from \"./nevents/tempin\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      days: 30,\n      donuts: [],\n      worlddata: [],\n    };\n    // this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  daysChange = (event) => {\n    if (event.key === \"Enter\") {\n      this.setState({ days: event.target.value });\n      this.fetchData(this.state.days);\n    }\n  };\n\n  fetchData = (days) => {\n    // fetch(\n    //   \"https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent({days})}&status=open\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(data.events);\n    //   })\n    //   .catch((error) => {\n    //     console.log(\"Request failed: \", error);\n    //   });\n\n    let data = require(\"./nevents/tempin\");\n    let donutsdict = {};\n    let l_worlddata = [];\n    let l_count = 0;\n    for (let event of data) {\n      l_count++; //total number of events\n\n      //world map data\n      let title = event.title;\n      let categories = \"\";\n\n      //CATEGORIES information for each child component\n      for (let category of event.categories) {\n        //world\n        categories += category.id + \" \";\n        //donuts\n        if (category.id in donutsdict) {\n          donutsdict[category.id]++;\n        } else {\n          donutsdict[category.id] = 1;\n        }\n      }\n\n      for (let geometry of event.geometry) {\n        //world\n        //one event one location\n        if (geometry.type === \"Point\") {\n          let worldevent = {};\n          worldevent[\"title\"] = title;\n          worldevent[\"type\"] = categories.trim();\n          worldevent[\"lat\"] = geometry.coordinates[1];\n          worldevent[\"lon\"] = geometry.coordinates[0];\n          l_worlddata.push(worldevent);\n        }\n        //one event multiple locations\n        else {\n          for (let coord of geometry.coordinates) {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lon\"] = coord[0];\n            worldevent[\"lat\"] = coord[1];\n            l_worlddata.push(worldevent);\n          }\n        }\n      }\n    }\n    let l_donuts = Object.keys(donutsdict).map((key) => [key, donutsdict[key]]);\n    l_donuts.sort((first, second) => second[1] - first[1]);\n    this.setState({ donuts: l_donuts, count: l_count, worlddata: l_worlddata });\n  };\n\n  render() {\n    return (\n      <div className=\"nevents\">\n        <div className=\"navbar\">\n          <span>\n            <b>Natural Events</b>\n          </span>\n          <div className=\"nav-controls\">\n            Information for the last{\" \"}\n            <input\n              type=\"number\"\n              defaultValue={this.state.days}\n              onKeyDown={this.daysChange}\n            ></input>\n            days\n          </div>\n        </div>\n        <div className=\"nevents_container\">\n          <div className=\"number_events nevents_item\">\n            <div className=\"number\">\n              Number of events: <br />\n              <span>{this.state.count}</span>\n            </div>\n            {this.state.donuts.length != 0\n              ? this.state.donuts\n                  .slice(0, 4)\n                  .map((donut) => (\n                    <NEeach event={donut} total={this.state.count} />\n                  ))\n              : \"\"}\n          </div>\n          <div className=\"nevents_world nevents_item\">\n            <NEworldmap worlddata={this.state.worlddata} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NEvents;\n"]},"metadata":{},"sourceType":"module"}