{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js\";\nimport React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEtop from \"./nevents/NEtop\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEbubble from \"./nevents/NEbubble\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n  constructor() {\n    super();\n\n    this.daysChange = event => {\n      if (event.key === \"Enter\") {\n        this.setState({\n          days: event.target.value\n        });\n        this.fetchData(event.target.value);\n      }\n    };\n\n    this.fetchData = days => {\n      // fetch(\n      //   `https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent(\n      //     days\n      //   )}&status=open`\n      // )\n      //   .then((response) => response.json())\n      //   .then((data) => {\n      //     data = data.events;\n      //   })\n      //   .catch((error) => {\n      //     console.log(\"Request failed: \", error);\n      //   });\n      let data = require(\"./nevents/tempin\");\n\n      let l_count = 0;\n      let l_bar = {};\n      let l_worlddata = [];\n      let l_date_mag = [];\n      let l_catid = [0]; //BUBBLE : category with id as index\n\n      let l_dateid = [0]; //BUBBLE : date with id as index\n\n      let l_bubble = [];\n      let to_date = new Date();\n      let from_date = new Date();\n      from_date.setDate(from_date.getDate() - days);\n\n      for (let event of data) {\n        l_count++; //total number of events\n\n        let title = event.title;\n        let categories = \"\"; //categories for the single event in the loop in string\n\n        let current_cat = []; //categories for the single event in the loop\n\n        let current_date = []; //dates already recorded for this event;\n        //CATEGORIES information for each child component\n\n        for (let category of event.categories) {\n          //world + area\n          categories += category.id + \" \"; //BAR\n\n          if (category.id in l_bar) {\n            l_bar[category.id]++;\n          } else {\n            l_bar[category.id] = 1;\n          } //BUBBLE\n\n\n          if (!l_catid.includes(category.id, 0)) {\n            l_catid.push(category.id);\n          }\n\n          current_cat.push(category.id);\n        } //AREA Map For DATE and MAGNITUDE\n\n\n        let date_mag = {\n          title: title,\n          source: {\n            id: event.sources[0].id,\n            url: event.sources[0].url\n          },\n          categories: categories.trim(),\n          geometry: event.geometry\n        };\n        l_date_mag.push(date_mag); //WORLD MAP DATA per lat,long\n        //BUBBLE\n\n        for (let geometry of event.geometry) {\n          //world\n          //one event one location\n          if (geometry.type === \"Point\") {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lat\"] = geometry.coordinates[1];\n            worldevent[\"lon\"] = geometry.coordinates[0];\n            worldevent[\"date\"] = geometry.date;\n            l_worlddata.push(worldevent);\n          } //one event multiple locations\n          else {\n              for (let coord of geometry.coordinates) {\n                let worldevent = {};\n                worldevent[\"title\"] = title;\n                worldevent[\"type\"] = categories.trim();\n                worldevent[\"lon\"] = coord[0];\n                worldevent[\"lat\"] = coord[1];\n                l_worlddata.push(worldevent);\n              }\n            } //BUBBLE\n\n\n          let dateformat = new Date(geometry.date);\n\n          if (dateformat >= from_date && dateformat <= to_date) {\n            let tempdate = geometry.date.substring(0, 10);\n\n            if (!current_date.includes(tempdate, 0)) {\n              for (let c of current_cat) {\n                if (!l_dateid.includes(tempdate, 0)) {\n                  l_dateid.push(tempdate);\n                  l_dateid.sort();\n                }\n\n                let flag = false;\n\n                for (let b of l_bubble) {\n                  if (b.x == l_dateid.indexOf(tempdate) && b.y == l_catid.indexOf(c)) {\n                    b.r += 2;\n                    flag = true;\n                  }\n                }\n\n                if (!flag) {\n                  l_bubble.push({\n                    x: l_dateid.indexOf(tempdate),\n                    y: l_catid.indexOf(c),\n                    r: 5\n                  });\n                }\n              }\n\n              current_date.push(tempdate);\n            }\n          }\n        }\n      }\n\n      l_bar = Object.keys(l_bar).map(key => [key, l_bar[key]]).sort((first, second) => second[1] - first[1]).slice(0, 4);\n      this.setState({\n        bar: l_bar,\n        count: l_count,\n        worlddata: l_worlddata,\n        area_data_mag: l_date_mag,\n        bubble: l_bubble,\n        catid: l_catid,\n        dateid: l_dateid\n      });\n    };\n\n    this.state = {\n      count: 0,\n      days: 30,\n      bar: [],\n      worlddata: [],\n      area_data_mag: [],\n      bubble: [],\n      catid: [],\n      dateid: []\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.daysChange = this.daysChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, \"Natural Events\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, \"Information for the last\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      defaultValue: this.state.days,\n      onKeyDown: this.daysChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }), \"days\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nevents_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number_events nevents_item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, \"Number of events: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, this.state.count)), /*#__PURE__*/React.createElement(NEtop, {\n      events: this.state.bar,\n      total: this.state.count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(NEworldmap, {\n      worlddata: this.state.worlddata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NEeach, {\n      area_data_mag: this.state.area_data_mag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NEbubble, {\n      bubble: this.state.bubble,\n      dateid: this.state.dateid,\n      catid: this.state.catid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default NEvents;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/NEvents.js"],"names":["React","NEworldmap","NEtop","NEeach","NEbubble","NEvents","Component","constructor","daysChange","event","key","setState","days","target","value","fetchData","data","require","l_count","l_bar","l_worlddata","l_date_mag","l_catid","l_dateid","l_bubble","to_date","Date","from_date","setDate","getDate","title","categories","current_cat","current_date","category","id","includes","push","date_mag","source","sources","url","trim","geometry","type","worldevent","coordinates","date","coord","dateformat","tempdate","substring","c","sort","flag","b","x","indexOf","y","r","Object","keys","map","first","second","slice","bar","count","worlddata","area_data_mag","bubble","catid","dateid","state","bind","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AACpC;AACAC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAoBdC,UApBc,GAoBAC,KAAD,IAAW;AACtB,UAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI,MAAN,CAAaC;AAArB,SAAd;AACA,aAAKC,SAAL,CAAeN,KAAK,CAACI,MAAN,CAAaC,KAA5B;AACD;AACF,KAzBa;;AAAA,SA2BdC,SA3Bc,GA2BDH,IAAD,IAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAII,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,OAAO,GAAG,CAAC,CAAD,CAAd,CAlBoB,CAkBD;;AACnB,UAAIC,QAAQ,GAAG,CAAC,CAAD,CAAf,CAnBoB,CAmBA;;AACpB,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAIC,SAAS,GAAG,IAAID,IAAJ,EAAhB;AACAC,MAAAA,SAAS,CAACC,OAAV,CAAkBD,SAAS,CAACE,OAAV,KAAsBjB,IAAxC;;AAEA,WAAK,IAAIH,KAAT,IAAkBO,IAAlB,EAAwB;AACtBE,QAAAA,OAAO,GADe,CACX;;AACX,YAAIY,KAAK,GAAGrB,KAAK,CAACqB,KAAlB;AACA,YAAIC,UAAU,GAAG,EAAjB,CAHsB,CAGD;;AACrB,YAAIC,WAAW,GAAG,EAAlB,CAJsB,CAIA;;AACtB,YAAIC,YAAY,GAAG,EAAnB,CALsB,CAKC;AAEvB;;AACA,aAAK,IAAIC,QAAT,IAAqBzB,KAAK,CAACsB,UAA3B,EAAuC;AACrC;AACAA,UAAAA,UAAU,IAAIG,QAAQ,CAACC,EAAT,GAAc,GAA5B,CAFqC,CAGrC;;AACA,cAAID,QAAQ,CAACC,EAAT,IAAehB,KAAnB,EAA0B;AACxBA,YAAAA,KAAK,CAACe,QAAQ,CAACC,EAAV,CAAL;AACD,WAFD,MAEO;AACLhB,YAAAA,KAAK,CAACe,QAAQ,CAACC,EAAV,CAAL,GAAqB,CAArB;AACD,WARoC,CASrC;;;AACA,cAAI,CAACb,OAAO,CAACc,QAAR,CAAiBF,QAAQ,CAACC,EAA1B,EAA8B,CAA9B,CAAL,EAAuC;AACrCb,YAAAA,OAAO,CAACe,IAAR,CAAaH,QAAQ,CAACC,EAAtB;AACD;;AACDH,UAAAA,WAAW,CAACK,IAAZ,CAAiBH,QAAQ,CAACC,EAA1B;AACD,SAtBqB,CAwBtB;;;AACA,YAAIG,QAAQ,GAAG;AACbR,UAAAA,KAAK,EAAEA,KADM;AAEbS,UAAAA,MAAM,EAAE;AAAEJ,YAAAA,EAAE,EAAE1B,KAAK,CAAC+B,OAAN,CAAc,CAAd,EAAiBL,EAAvB;AAA2BM,YAAAA,GAAG,EAAEhC,KAAK,CAAC+B,OAAN,CAAc,CAAd,EAAiBC;AAAjD,WAFK;AAGbV,UAAAA,UAAU,EAAEA,UAAU,CAACW,IAAX,EAHC;AAIbC,UAAAA,QAAQ,EAAElC,KAAK,CAACkC;AAJH,SAAf;AAMAtB,QAAAA,UAAU,CAACgB,IAAX,CAAgBC,QAAhB,EA/BsB,CAiCtB;AACA;;AACA,aAAK,IAAIK,QAAT,IAAqBlC,KAAK,CAACkC,QAA3B,EAAqC;AACnC;AACA;AACA,cAAIA,QAAQ,CAACC,IAAT,KAAkB,OAAtB,EAA+B;AAC7B,gBAAIC,UAAU,GAAG,EAAjB;AACAA,YAAAA,UAAU,CAAC,OAAD,CAAV,GAAsBf,KAAtB;AACAe,YAAAA,UAAU,CAAC,MAAD,CAAV,GAAqBd,UAAU,CAACW,IAAX,EAArB;AACAG,YAAAA,UAAU,CAAC,KAAD,CAAV,GAAoBF,QAAQ,CAACG,WAAT,CAAqB,CAArB,CAApB;AACAD,YAAAA,UAAU,CAAC,KAAD,CAAV,GAAoBF,QAAQ,CAACG,WAAT,CAAqB,CAArB,CAApB;AACAD,YAAAA,UAAU,CAAC,MAAD,CAAV,GAAqBF,QAAQ,CAACI,IAA9B;AACA3B,YAAAA,WAAW,CAACiB,IAAZ,CAAiBQ,UAAjB;AACD,WARD,CASA;AATA,eAUK;AACH,mBAAK,IAAIG,KAAT,IAAkBL,QAAQ,CAACG,WAA3B,EAAwC;AACtC,oBAAID,UAAU,GAAG,EAAjB;AACAA,gBAAAA,UAAU,CAAC,OAAD,CAAV,GAAsBf,KAAtB;AACAe,gBAAAA,UAAU,CAAC,MAAD,CAAV,GAAqBd,UAAU,CAACW,IAAX,EAArB;AACAG,gBAAAA,UAAU,CAAC,KAAD,CAAV,GAAoBG,KAAK,CAAC,CAAD,CAAzB;AACAH,gBAAAA,UAAU,CAAC,KAAD,CAAV,GAAoBG,KAAK,CAAC,CAAD,CAAzB;AACA5B,gBAAAA,WAAW,CAACiB,IAAZ,CAAiBQ,UAAjB;AACD;AACF,aAtBkC,CAwBnC;;;AACA,cAAII,UAAU,GAAG,IAAIvB,IAAJ,CAASiB,QAAQ,CAACI,IAAlB,CAAjB;;AACA,cAAIE,UAAU,IAAItB,SAAd,IAA2BsB,UAAU,IAAIxB,OAA7C,EAAsD;AACpD,gBAAIyB,QAAQ,GAAGP,QAAQ,CAACI,IAAT,CAAcI,SAAd,CAAwB,CAAxB,EAA2B,EAA3B,CAAf;;AACA,gBAAI,CAAClB,YAAY,CAACG,QAAb,CAAsBc,QAAtB,EAAgC,CAAhC,CAAL,EAAyC;AACvC,mBAAK,IAAIE,CAAT,IAAcpB,WAAd,EAA2B;AACzB,oBAAI,CAACT,QAAQ,CAACa,QAAT,CAAkBc,QAAlB,EAA4B,CAA5B,CAAL,EAAqC;AACnC3B,kBAAAA,QAAQ,CAACc,IAAT,CAAca,QAAd;AACA3B,kBAAAA,QAAQ,CAAC8B,IAAT;AACD;;AACD,oBAAIC,IAAI,GAAG,KAAX;;AACA,qBAAK,IAAIC,CAAT,IAAc/B,QAAd,EAAwB;AACtB,sBACE+B,CAAC,CAACC,CAAF,IAAOjC,QAAQ,CAACkC,OAAT,CAAiBP,QAAjB,CAAP,IACAK,CAAC,CAACG,CAAF,IAAOpC,OAAO,CAACmC,OAAR,CAAgBL,CAAhB,CAFT,EAGE;AACAG,oBAAAA,CAAC,CAACI,CAAF,IAAO,CAAP;AACAL,oBAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACD,oBAAI,CAACA,IAAL,EAAW;AACT9B,kBAAAA,QAAQ,CAACa,IAAT,CAAc;AACZmB,oBAAAA,CAAC,EAAEjC,QAAQ,CAACkC,OAAT,CAAiBP,QAAjB,CADS;AAEZQ,oBAAAA,CAAC,EAAEpC,OAAO,CAACmC,OAAR,CAAgBL,CAAhB,CAFS;AAGZO,oBAAAA,CAAC,EAAE;AAHS,mBAAd;AAKD;AACF;;AACD1B,cAAAA,YAAY,CAACI,IAAb,CAAkBa,QAAlB;AACD;AACF;AACF;AACF;;AAED/B,MAAAA,KAAK,GAAGyC,MAAM,CAACC,IAAP,CAAY1C,KAAZ,EACL2C,GADK,CACApD,GAAD,IAAS,CAACA,GAAD,EAAMS,KAAK,CAACT,GAAD,CAAX,CADR,EAEL2C,IAFK,CAEA,CAACU,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAAC,CAAD,CAAN,GAAYD,KAAK,CAAC,CAAD,CAFpC,EAGLE,KAHK,CAGC,CAHD,EAGI,CAHJ,CAAR;AAKA,WAAKtD,QAAL,CAAc;AACZuD,QAAAA,GAAG,EAAE/C,KADO;AAEZgD,QAAAA,KAAK,EAAEjD,OAFK;AAGZkD,QAAAA,SAAS,EAAEhD,WAHC;AAIZiD,QAAAA,aAAa,EAAEhD,UAJH;AAKZiD,QAAAA,MAAM,EAAE9C,QALI;AAMZ+C,QAAAA,KAAK,EAAEjD,OANK;AAOZkD,QAAAA,MAAM,EAAEjD;AAPI,OAAd;AASD,KA/Ja;;AAEZ,SAAKkD,KAAL,GAAa;AACXN,MAAAA,KAAK,EAAE,CADI;AAEXvD,MAAAA,IAAI,EAAE,EAFK;AAGXsD,MAAAA,GAAG,EAAE,EAHM;AAIXE,MAAAA,SAAS,EAAE,EAJA;AAKXC,MAAAA,aAAa,EAAE,EALJ;AAMXC,MAAAA,MAAM,EAAE,EANG;AAOXC,MAAAA,KAAK,EAAE,EAPI;AAQXC,MAAAA,MAAM,EAAE;AARG,KAAb;AAUA,SAAKzD,SAAL,GAAiB,KAAKA,SAAL,CAAe2D,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKlE,UAAL,GAAkB,KAAKA,UAAL,CAAgBkE,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAK5D,SAAL,CAAe,KAAK0D,KAAL,CAAW7D,IAA1B;AACD;;AA+IDgE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,eAIE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC2B,GAD3B,eAEE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAW7D,IAF3B;AAGE,MAAA,SAAS,EAAE,KAAKJ,UAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,SAJF,CADF,eAeE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKiE,KAAL,CAAWN,KAAlB,CAFF,CADF,eAYE,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKM,KAAL,CAAWP,GAA1B;AAA+B,MAAA,KAAK,EAAE,KAAKO,KAAL,CAAWN,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF,eAeE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKM,KAAL,CAAWL,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,eAgBE,oBAAC,MAAD;AAAQ,MAAA,aAAa,EAAE,KAAKK,KAAL,CAAWJ,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,eAiBE,oBAAC,QAAD;AACE,MAAA,MAAM,EAAE,KAAKI,KAAL,CAAWH,MADrB;AAEE,MAAA,MAAM,EAAE,KAAKG,KAAL,CAAWD,MAFrB;AAGE,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWF,KAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CAfF,CADF;AAyCD;;AA7MmC;;AAgNtC,eAAelE,OAAf","sourcesContent":["import React from \"react\";\nimport NEworldmap from \"./nevents/NEworldmap\";\nimport NEtop from \"./nevents/NEtop\";\nimport NEeach from \"./nevents/NEeach\";\nimport NEbubble from \"./nevents/NEbubble\";\n\nclass NEvents extends React.Component {\n  // const NASA_API_KEY = encodeURIComponent(process.env.REACT_APP_NE_API_KEY);\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      days: 30,\n      bar: [],\n      worlddata: [],\n      area_data_mag: [],\n      bubble: [],\n      catid: [],\n      dateid: [],\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.daysChange = this.daysChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData(this.state.days);\n  }\n\n  daysChange = (event) => {\n    if (event.key === \"Enter\") {\n      this.setState({ days: event.target.value });\n      this.fetchData(event.target.value);\n    }\n  };\n\n  fetchData = (days) => {\n    // fetch(\n    //   `https://eonet.sci.gsfc.nasa.gov/api/v3/events?days=${encodeURIComponent(\n    //     days\n    //   )}&status=open`\n    // )\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     data = data.events;\n    //   })\n    //   .catch((error) => {\n    //     console.log(\"Request failed: \", error);\n    //   });\n    let data = require(\"./nevents/tempin\");\n    let l_count = 0;\n    let l_bar = {};\n    let l_worlddata = [];\n    let l_date_mag = [];\n    let l_catid = [0]; //BUBBLE : category with id as index\n    let l_dateid = [0]; //BUBBLE : date with id as index\n    let l_bubble = [];\n    let to_date = new Date();\n    let from_date = new Date();\n    from_date.setDate(from_date.getDate() - days);\n\n    for (let event of data) {\n      l_count++; //total number of events\n      let title = event.title;\n      let categories = \"\"; //categories for the single event in the loop in string\n      let current_cat = []; //categories for the single event in the loop\n      let current_date = []; //dates already recorded for this event;\n\n      //CATEGORIES information for each child component\n      for (let category of event.categories) {\n        //world + area\n        categories += category.id + \" \";\n        //BAR\n        if (category.id in l_bar) {\n          l_bar[category.id]++;\n        } else {\n          l_bar[category.id] = 1;\n        }\n        //BUBBLE\n        if (!l_catid.includes(category.id, 0)) {\n          l_catid.push(category.id);\n        }\n        current_cat.push(category.id);\n      }\n\n      //AREA Map For DATE and MAGNITUDE\n      let date_mag = {\n        title: title,\n        source: { id: event.sources[0].id, url: event.sources[0].url },\n        categories: categories.trim(),\n        geometry: event.geometry,\n      };\n      l_date_mag.push(date_mag);\n\n      //WORLD MAP DATA per lat,long\n      //BUBBLE\n      for (let geometry of event.geometry) {\n        //world\n        //one event one location\n        if (geometry.type === \"Point\") {\n          let worldevent = {};\n          worldevent[\"title\"] = title;\n          worldevent[\"type\"] = categories.trim();\n          worldevent[\"lat\"] = geometry.coordinates[1];\n          worldevent[\"lon\"] = geometry.coordinates[0];\n          worldevent[\"date\"] = geometry.date;\n          l_worlddata.push(worldevent);\n        }\n        //one event multiple locations\n        else {\n          for (let coord of geometry.coordinates) {\n            let worldevent = {};\n            worldevent[\"title\"] = title;\n            worldevent[\"type\"] = categories.trim();\n            worldevent[\"lon\"] = coord[0];\n            worldevent[\"lat\"] = coord[1];\n            l_worlddata.push(worldevent);\n          }\n        }\n\n        //BUBBLE\n        let dateformat = new Date(geometry.date);\n        if (dateformat >= from_date && dateformat <= to_date) {\n          let tempdate = geometry.date.substring(0, 10);\n          if (!current_date.includes(tempdate, 0)) {\n            for (let c of current_cat) {\n              if (!l_dateid.includes(tempdate, 0)) {\n                l_dateid.push(tempdate);\n                l_dateid.sort();\n              }\n              let flag = false;\n              for (let b of l_bubble) {\n                if (\n                  b.x == l_dateid.indexOf(tempdate) &&\n                  b.y == l_catid.indexOf(c)\n                ) {\n                  b.r += 2;\n                  flag = true;\n                }\n              }\n              if (!flag) {\n                l_bubble.push({\n                  x: l_dateid.indexOf(tempdate),\n                  y: l_catid.indexOf(c),\n                  r: 5,\n                });\n              }\n            }\n            current_date.push(tempdate);\n          }\n        }\n      }\n    }\n\n    l_bar = Object.keys(l_bar)\n      .map((key) => [key, l_bar[key]])\n      .sort((first, second) => second[1] - first[1])\n      .slice(0, 4);\n\n    this.setState({\n      bar: l_bar,\n      count: l_count,\n      worlddata: l_worlddata,\n      area_data_mag: l_date_mag,\n      bubble: l_bubble,\n      catid: l_catid,\n      dateid: l_dateid,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"nevents\">\n        <div className=\"navbar\">\n          <span>\n            <b>Natural Events</b>\n          </span>\n          <div className=\"nav-controls\">\n            Information for the last{\" \"}\n            <input\n              type=\"number\"\n              defaultValue={this.state.days}\n              onKeyDown={this.daysChange}\n            ></input>\n            days\n          </div>\n        </div>\n        <div className=\"nevents_container\">\n          <div className=\"number_events nevents_item\">\n            <div className=\"number\">\n              Number of events: <br />\n              <span>{this.state.count}</span>\n            </div>\n            {/* {this.state.donuts.length != 0\n              ? this.state.donuts\n                  .slice(0, 4)\n                  .map((donut) => (\n                    <NEeach event={donut} total={this.state.count} />\n                  ))\n              : \"\"} */}\n            <NEtop events={this.state.bar} total={this.state.count} />\n          </div>\n          <NEworldmap worlddata={this.state.worlddata} />\n          <NEeach area_data_mag={this.state.area_data_mag} />\n          <NEbubble\n            bubble={this.state.bubble}\n            dateid={this.state.dateid}\n            catid={this.state.catid}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NEvents;\n"]},"metadata":{},"sourceType":"module"}