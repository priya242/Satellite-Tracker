{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/components/BarChart.js\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props); //this.state = {\n    //propYears: [],\n    //propStateData: [],\n    //propStateOptions: [],\n    //propStateYearlyData: []\n    //};\n\n    this.state = {\n      years: [],\n      stateData: [],\n      stateOptions: [],\n      stateYearlyData: []\n    };\n  }\n\n  fetchChartData(local) {\n    var localYears = [];\n\n    if (local) {\n      var satData = local;\n\n      for (var i = 0; i < satData.length; i++) {\n        var date = satData[i].launchDate;\n        var dataObject = new Date(date);\n\n        if (dataObject.getFullYear()) {\n          localYears.push(dataObject.getFullYear());\n        }\n      }\n    }\n\n    const yearlyData = localYears.reduce(function (object, satCount) {\n      if (!object[satCount]) {\n        object[satCount] = 1;\n      } else {\n        object[satCount]++;\n      }\n\n      return object;\n    }, {});\n    const data = {\n      labels: Object.keys(yearlyData),\n      datasets: [{\n        label: \"Satellite Count By Years\",\n        backgroundColor: \"rgba(255, 215, 0,0.8)\",\n        borderColor: \"rgba(0 ,0 ,238,1)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255, 215, 0,0.4)\",\n        hoverBorderColor: \"rgba(0 ,0 ,238,1)\",\n        barPercentage: 0.5,\n        barThickness: 20,\n        data: Object.values(yearlyData)\n      }]\n    };\n    const options = {\n      legend: {\n        display: true,\n        labels: {\n          fontColor: \"#fff\"\n        }\n      },\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            padding: 20\n          },\n          ticks: {\n            autoSkip: false,\n            fontColor: \"#fff\",\n            fontSize: 14\n          }\n        }],\n        xAxes: [{\n          ticks: {\n            fontColor: \"#fff\",\n            fontSize: 14\n          }\n        }]\n      }\n    };\n    this.state.years = localYears;\n    this.state.stateData = data;\n    this.state.stateOptions = options;\n    this.state.stateYearlyData = yearlyData;\n  }\n\n  render(boolVal) {\n    const Data = [];\n    const Options = [];\n    const TotalSat = this.props.DataSets.info;\n    console.log(TotalSat);\n    this.fetchChartData(this.props.DataSets.above);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"barcharts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"Active Satellites\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"dropdown\",\n      onChange: this.onFieldChange.bind(this),\n      id: \"dd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Select year range\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2010-2020\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"2010-2020\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2010-2020\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"2000-2010\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1990-2000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"1990-2000\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1980-1990\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, \"1980-1990\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1970-1980\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"1970-1980\")), /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.stateData,\n      height: 20,\n      width: 80,\n      options: this.state.stateOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  onFieldChange() {\n    //console.log(yearlyData)\n    var ddValue = document.getElementById(\"dd\");\n    var yearRange = ddValue.value.split(\"-\");\n    var firstYear = yearRange[0];\n    var lastYear = yearRange[1];\n    console.log(firstYear + \" \" + lastYear);\n    var c = this.state.stateYearlyData;\n    var filteredData = []; //for(var i = 0; i < c.length; i++){\n    //  if(c[i] >= parseInt(firstYear) && c[i] <= parseInt(lastYear)){\n    //  filteredData.push(c[i])\n    //}\n    //}\n\n    filteredData = {\n      1958: 1,\n      1960: 10\n    };\n    console.log(filteredData);\n    this.state.stateData = filteredData;\n    this.render(true);\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/BarChart.js"],"names":["React","Bar","BarChart","Component","constructor","props","state","years","stateData","stateOptions","stateYearlyData","fetchChartData","local","localYears","satData","i","length","date","launchDate","dataObject","Date","getFullYear","push","yearlyData","reduce","object","satCount","data","labels","Object","keys","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","barPercentage","barThickness","values","options","legend","display","fontColor","scales","yAxes","scaleLabel","padding","ticks","autoSkip","fontSize","xAxes","render","boolVal","Data","Options","TotalSat","DataSets","info","console","log","above","onFieldChange","bind","ddValue","document","getElementById","yearRange","value","split","firstYear","lastYear","c","filteredData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.state = {\n      //propYears: [],\n      //propStateData: [],\n      //propStateOptions: [],\n      //propStateYearlyData: []\n    //};\n  this.state = {\n    years: [],\n    stateData: [],\n    stateOptions: [],\n    stateYearlyData: []\n  }\n}\nfetchChartData(local){\n  var localYears = [];\n  if (local) {\n    var satData = local;\n    for (var i = 0; i < satData.length; i++) {\n      var date = satData[i].launchDate;\n      var dataObject = new Date(date);\n      if (dataObject.getFullYear()) {\n        localYears.push(dataObject.getFullYear());        \n      }\n    }\n  }\n\n  const yearlyData = localYears.reduce(function (object, satCount) {\n    if (!object[satCount]) {\n      object[satCount] = 1;\n    } else {\n      object[satCount]++;\n    }\n    return object;\n  }, {});\n\n  const data = {\n    labels: Object.keys(yearlyData),\n    datasets: [\n      {\n        label: \"Satellite Count By Years\",\n        backgroundColor: \"rgba(255, 215, 0,0.8)\",\n        borderColor: \"rgba(0 ,0 ,238,1)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255, 215, 0,0.4)\",\n        hoverBorderColor: \"rgba(0 ,0 ,238,1)\",\n        barPercentage: 0.5,\n        barThickness: 20,\n        data: Object.values(yearlyData),\n      },\n    ],\n  };\n const options = {\n    legend: {\n      display: true,\n      labels: {\n        fontColor: \"#fff\",\n      },\n    },\n    scales: {\n      yAxes: [\n        {\n          scaleLabel: {\n            padding: 20,\n          },\n          ticks: {\n            autoSkip: false,\n            fontColor: \"#fff\",\n            fontSize: 14,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"#fff\",\n            fontSize: 14,\n          },\n        },\n      ],\n    },\n  };\n \n this.state.years = localYears;\n this.state.stateData = data;\n this.state.stateOptions = options;\n this.state.stateYearlyData = yearlyData;\n}\n\n  render(boolVal) {\n    const Data = [];\n    const Options = [];\n    const TotalSat = this.props.DataSets.info\n    console.log(TotalSat)\n    this.fetchChartData(this.props.DataSets.above);\n    return (\n      <div className=\"barcharts\">\n        <h1>Active Satellites</h1>\n        <input type = \"text\">\n        </input>\n        <select\n          className=\"dropdown\"\n          onChange={this.onFieldChange.bind(this)}\n          id=\"dd\">\n          <option value=\"\">Select year range</option>\n          <option value=\"2010-2020\">2010-2020</option>\n          <option value=\"2010-2020\">2000-2010</option>\n          <option value=\"1990-2000\">1990-2000</option>\n          <option value=\"1980-1990\">1980-1990</option>\n          <option value=\"1970-1980\">1970-1980</option>\n        </select>\n        <Bar data={this.state.stateData} height={20} width={80} options={this.state.stateOptions} />\n      </div>\n    );\n  }\n\n  onFieldChange() {\n    //console.log(yearlyData)\n    var ddValue = document.getElementById(\"dd\");\n    var yearRange = ddValue.value.split(\"-\");\n    var firstYear = yearRange[0];\n    var lastYear = yearRange[1];\n    console.log(firstYear + \" \" + lastYear);\n    var c = this.state.stateYearlyData;\n    var filteredData = [];\n    //for(var i = 0; i < c.length; i++){\n      //  if(c[i] >= parseInt(firstYear) && c[i] <= parseInt(lastYear)){\n        //  filteredData.push(c[i])\n        //}\n    //}\n    filteredData = {1958: 1, 1960: 10}\n    console.log(filteredData)\n    this.state.stateData = filteredData;\n    this.render(true)\n  }\n}\n\nexport default BarChart;\n\n"]},"metadata":{},"sourceType":"module"}