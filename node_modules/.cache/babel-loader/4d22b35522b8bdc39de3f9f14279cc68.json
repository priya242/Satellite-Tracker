{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js\";\nimport React from \"react\";\nimport \"./style.css\"; //import { render } from \"react-dom\";\n//import Header from \"./components/Header\"\n//import Main from \"./components/Main\"\n//import Footer  from \"./components/Footer\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      urls: [],\n      satellites: [],\n      category: [],\n      isLoaded: false\n    };\n  }\n\n  fetchData() {\n    const url = \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    fetch(url).then(response => response.json()).then(data => {\n      return data;\n    }).then(data => {\n      this.setState({\n        nasa: data.collection.items[1].href,\n        isLoaded: true\n      });\n    });\n    Promise.all([urls.map(url => fetch(url).then(responses => responses.json()).then(values => {\n      return values.info; // console.log(values.info)\n    }).then(data => {\n      this.setState({\n        satellites: data.satcount,\n        category: data.category,\n        isLoaded: true\n      });\n\n      for (var i = 0; i < this.props.category.length; i++) {\n        console.log(data.category[i]);\n      }\n    }))]); // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n\n    for (let id = 1; id <= 10; id++) {\n      let url1 = \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" + id + \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n\n    return urls; //console.log(urls)\n  } //data = {category:count}\n  //const url1 = 'https://uphere-space1.p.rapidapi.com/satellite/list?country=IND&page=1';\n\n\n  render() {\n    const {\n      nasa,\n      satellites,\n      category,\n      isLoaded\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Satellite Tracker\"), !isLoaded && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 23\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      controls: true,\n      muted: true,\n      loop: true,\n      src: nasa,\n      type: \"video/mp4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"Category = \", category), \"return\", /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 3\n      }\n    }, \"Satellite Count  = \", satellites));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js"],"names":["React","App","Component","constructor","props","state","nasa","urls","satellites","category","isLoaded","fetchData","url","loadSat","fetch","then","response","json","data","setState","collection","items","href","Promise","all","map","responses","values","info","satcount","i","length","console","log","componentDidMount","id","url1","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n//import { render } from \"react-dom\";\n//import Header from \"./components/Header\"\n//import Main from \"./components/Main\"\n//import Footer  from \"./components/Footer\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      urls: [],\n      satellites: [],\n      category: [],\n      isLoaded: false,\n    };\n  }\n  fetchData() {\n    const url =\n      \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        return data;\n      })\n      .then((data) => {\n        this.setState({\n          nasa: data.collection.items[1].href,\n          isLoaded: true,\n        });\n      });\n    Promise.all([\n      urls.map((url) =>\n        fetch(url)\n          .then((responses) => responses.json())\n          .then((values) => {\n            return values.info;\n           // console.log(values.info)\n          })\n          .then((data) => {\n\n          \n            this.setState({\n              satellites: data.satcount,\n              category: data.category,\n              isLoaded: true,\n            });\n            for(var i = 0; i < this.props.category.length;i++){\n              console.log(data.category[i]);\n            }\n            \n          })\n      ),\n    ]);\n\n    // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n    for (let id = 1; id <= 10; id++) {\n      let url1 =\n        \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" +\n        id +\n        \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n    return urls;\n    //console.log(urls)\n  }\n  //data = {category:count}\n  //const url1 = 'https://uphere-space1.p.rapidapi.com/satellite/list?country=IND&page=1';\n\n  render() {\n    const { nasa, satellites, category, isLoaded } = this.state;\n    \n\n    return (\n      <React.Fragment>\n        <h1>Satellite Tracker</h1>\n        {!isLoaded && <p>Loading...</p>}\n        <video autoPlay controls muted loop src={nasa} type=\"video/mp4\" />\n        \n          <div>\n            Category = {category}\n          </div> \n        \n       return   \n  <div>\n        Satellite Count  = {satellites} \n        </div>\n        \n        </React.Fragment>\n          \n        )}\n\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}