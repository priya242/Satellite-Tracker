{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/components/BarChart.js\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nexport default function BarChart(props) {\n  var years = [];\n\n  if (props.DataSets.above) {\n    var satData = props.DataSets.above;\n\n    for (var i = 0; i < satData.length; i++) {\n      var date = satData[i].launchDate;\n      var dataObject = new Date(date);\n\n      if (dataObject.getFullYear()) {\n        years.push(dataObject.getFullYear());\n      }\n    }\n  }\n\n  var yearlyData = years.reduce(function (object, satCount) {\n    if (!object[satCount]) {\n      object[satCount] = 1;\n    } else {\n      object[satCount]++;\n    }\n\n    return object;\n  }, {});\n  console.log(yearlyData.split({}, 10));\n\n  var newLegendClickHandler = function (e, legendItem) {\n    var index = legendItem.datasetIndex;\n    var ci = this.chart;\n    var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n    ci.update();\n  };\n\n  const data = {\n    labels: Object.keys(yearlyData),\n    datasets: [{\n      label: \"Satellite Launch \",\n      backgroundColor: \"rgba(255, 215, 0,0.8)\",\n      borderColor: \"rgba(0 ,0 ,238,1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: \"rgba(255, 215, 0,0.4)\",\n      hoverBorderColor: \"rgba(0 ,0 ,238,1)\",\n      barPercentage: 0.5,\n      barThickness: 20,\n      data: Object.values(yearlyData)\n    }]\n  };\n  const options = {\n    legend: {\n      display: true,\n      onClick: newLegendClickHandler,\n      labels: {\n        fontColor: \"#fff\"\n      }\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          padding: 20\n        },\n        ticks: {\n          autoSkip: false,\n          fontColor: \"#fff\",\n          fontSize: 14\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          fontColor: \"#fff\",\n          fontSize: 14\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"barcharts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Active Satellites\"), /*#__PURE__*/React.createElement(Bar, {\n    data: data,\n    height: 20,\n    width: 80,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/BarChart.js"],"names":["React","Bar","BarChart","props","years","DataSets","above","satData","i","length","date","launchDate","dataObject","Date","getFullYear","push","yearlyData","reduce","object","satCount","console","log","split","newLegendClickHandler","e","legendItem","index","datasetIndex","ci","chart","meta","getDatasetMeta","hidden","data","datasets","update","labels","Object","keys","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","barPercentage","barThickness","values","options","legend","display","onClick","fontColor","scales","yAxes","scaleLabel","padding","ticks","autoSkip","fontSize","xAxes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nexport default function BarChart(props){\n  var years = [];\n  if (props.DataSets.above) {\n    var satData = props.DataSets.above;\n    for (var i = 0; i < satData.length; i++) {\n      var date = satData[i].launchDate;\n      var dataObject = new Date(date);\n      if (dataObject.getFullYear()) {\n        years.push(dataObject.getFullYear());\n      }\n    }\n  }\n  var yearlyData = years.reduce(function (object, satCount) {\n    if (!object[satCount]) {\n      object[satCount] = 1;\n    } else {\n      object[satCount]++;\n    }\n    return object;\n  }, {});\n  console.log(yearlyData.split({},10))\n  var newLegendClickHandler = function (e, legendItem) {\n    var index = legendItem.datasetIndex;\n    var ci = this.chart;\n    var meta = ci.getDatasetMeta(index);\n    // See controller.isDatasetVisible comment\n    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n    // We hid a dataset ... rerender the chart\n    ci.update();\n};\n\n  const data = {\n    labels: Object.keys(yearlyData),\n    datasets: [\n      {\n        label: \"Satellite Launch \",\n        backgroundColor: \"rgba(255, 215, 0,0.8)\",\n        borderColor: \"rgba(0 ,0 ,238,1)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255, 215, 0,0.4)\",\n        hoverBorderColor: \"rgba(0 ,0 ,238,1)\",\n        barPercentage: 0.5,\n        barThickness: 20,\n        data: Object.values(yearlyData),\n      }\n    ],\n  };\n  const options = {\n    legend: {\n      display:true,\n      onClick:newLegendClickHandler,\n      labels: {\n        fontColor: \"#fff\",\n      },\n      \n    },\n    scales: {\n      yAxes: [\n        {\n          scaleLabel: {\n            padding: 20,\n          },\n          ticks: {\n            autoSkip: false,\n            fontColor: \"#fff\",\n            fontSize: 14,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"#fff\",\n            fontSize: 14,\n          },},],\n    },\n  };\n  \n  \n  return (\n    <div className=\"barcharts\">\n      <h1>Active Satellites</h1>\n      <Bar\n        data={data}\n        height={20}\n        width = {80}\n        options={options}\n      />\n      </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}