{"ast":null,"code":"import React from \"react\";\n\nclass EarthView extends React.Component {\n  render() {\n    require([\"esri/Map\", \"esri/views/SceneView\", \"esri/layers/GraphicsLayer\", \"esri/Graphic\", \"dojo/text!https://developers.arcgis.com/javascript/latest/sample-code/satellites-3d/live/brightest.txt\"], function (Map, SceneView, GraphicsLayer, Graphic, data) {\n      var map = new Map({\n        basemap: \"satellite\"\n      });\n      var view = new SceneView({\n        container: \"viewDiv\",\n        map: map,\n        constraints: {\n          altitude: {\n            max: 12000000000 // meters\n\n          }\n        },\n        popup: {\n          dockEnabled: true,\n          dockOptions: {\n            breakpoint: false\n          }\n        }\n      });\n      view.popup.watch(\"selectedFeature\", function () {\n        satelliteTracks.removeAll();\n      });\n      view.popup.on(\"trigger-action\", function (event) {\n        if (event.action.id === \"track\") {\n          var graphic = view.popup.selectedFeature;\n          var trackFeatures = [];\n\n          for (var i = 0; i < 60 * 24; i++) {\n            var loc = null;\n\n            try {\n              loc = getSatelliteLocation(new Date(graphic.attributes.time + i * 1000 * 60), graphic.attributes.line1, graphic.attributes.line2);\n            } catch (error) {}\n\n            if (loc !== null) {\n              trackFeatures.push([loc.x, loc.y, loc.z]);\n            }\n          }\n\n          var track = new Graphic({\n            geometry: {\n              type: \"polyline\",\n              // autocasts as new Polyline()\n              paths: [trackFeatures]\n            },\n            symbol: {\n              type: \"line-3d\",\n              // autocasts as new LineSymbol3D()\n              symbolLayers: [{\n                type: \"line\",\n                // autocasts as new LineSymbol3DLayer()\n                material: {\n                  color: [192, 192, 192, 0.5]\n                },\n                size: 3\n              }]\n            }\n          });\n          satelliteTracks.add(track);\n        }\n      });\n      var satelliteLayer = new GraphicsLayer();\n      var satelliteTracks = new GraphicsLayer();\n      map.addMany([satelliteLayer, satelliteTracks]); // Parse the satellite TLE data\n\n      var lines = data.split(\"\\n\");\n      var count = (lines.length / 3).toFixed(0);\n\n      for (var i = 0; i < count; i++) {\n        var commonName = lines[i * 3 + 0];\n        var line1 = lines[i * 3 + 1];\n        var line2 = lines[i * 3 + 2];\n        var time = Date.now();\n        var designator = line1.substring(9, 16);\n        var launchYear = designator.substring(0, 2);\n        launchYear = Number(launchYear) >= 57 ? \"19\" + launchYear : \"20\" + launchYear;\n        var launchNum = Number(designator.substring(2, 5)).toString();\n        var noradId = Number(line1.substring(3, 7));\n        var satelliteLoc = null;\n\n        try {\n          satelliteLoc = getSatelliteLocation(new Date(time), line1, line2);\n        } catch (error) {}\n\n        if (satelliteLoc !== null) {\n          var template = {\n            // autocasts as new PopupTemplate()\n            title: \"{name}\",\n            content: \"Launch number {number} of {year}\",\n            actions: [{\n              // Create a popup action to display the satellite track.\n              title: \"Show Satellite Track\",\n              id: \"track\",\n              className: \"esri-icon-globe\"\n            }]\n          };\n          var graphic = new Graphic({\n            geometry: satelliteLoc,\n            symbol: {\n              type: \"picture-marker\",\n              // autocasts as new PictureMarkerSymbol()\n              url: \"https://developers.arcgis.com/javascript/latest/sample-code/satellites-3d/live/satellite.png\",\n              width: 48,\n              height: 48\n            },\n            attributes: {\n              name: commonName,\n              year: launchYear,\n              id: noradId,\n              number: launchNum,\n              time: time,\n              line1: line1,\n              line2: line2\n            },\n            popupTemplate: template\n          });\n          satelliteLayer.add(graphic);\n        }\n      }\n\n      function getSatelliteLocation(date, line1, line2) {\n        var satrec = satellite.twoline2satrec(line1, line2);\n        var position_and_velocity = satellite.propagate(satrec, date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n        var position_eci = position_and_velocity.position;\n        var gmst = satellite.gstime_from_date(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n        var position_gd = satellite.eci_to_geodetic(position_eci, gmst);\n        var longitude = position_gd.longitude;\n        var latitude = position_gd.latitude;\n        var height = position_gd.height;\n\n        if (isNaN(longitude) || isNaN(latitude) || isNaN(height)) {\n          return null;\n        }\n\n        var rad2deg = 180 / Math.PI;\n\n        while (longitude < -Math.PI) {\n          longitude += 2 * Math.PI;\n        }\n\n        while (longitude > Math.PI) {\n          longitude -= 2 * Math.PI;\n        }\n\n        return {\n          type: \"point\",\n          // Autocasts as new Point()\n          x: rad2deg * longitude,\n          y: rad2deg * latitude,\n          z: height * 1000\n        };\n      }\n    });\n  }\n\n}\n\nexport default EarthView;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/components/satinfo/EarthView.js"],"names":["React","EarthView","Component","render","require","Map","SceneView","GraphicsLayer","Graphic","data","map","basemap","view","container","constraints","altitude","max","popup","dockEnabled","dockOptions","breakpoint","watch","satelliteTracks","removeAll","on","event","action","id","graphic","selectedFeature","trackFeatures","i","loc","getSatelliteLocation","Date","attributes","time","line1","line2","error","push","x","y","z","track","geometry","type","paths","symbol","symbolLayers","material","color","size","add","satelliteLayer","addMany","lines","split","count","length","toFixed","commonName","now","designator","substring","launchYear","Number","launchNum","toString","noradId","satelliteLoc","template","title","content","actions","className","url","width","height","name","year","number","popupTemplate","date","satrec","satellite","twoline2satrec","position_and_velocity","propagate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","position_eci","position","gmst","gstime_from_date","position_gd","eci_to_geodetic","longitude","latitude","isNaN","rad2deg","Math","PI"],"mappings":"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","sourcesContent":["import React from \"react\";\nclass EarthView extends React.Component {\n    render(){\n      require([\n        \"esri/Map\",\n        \"esri/views/SceneView\",\n        \"esri/layers/GraphicsLayer\",\n        \"esri/Graphic\",\n        \"dojo/text!https://developers.arcgis.com/javascript/latest/sample-code/satellites-3d/live/brightest.txt\"\n      ], function(Map, SceneView, GraphicsLayer, Graphic, data) {\n        \n        var map = new Map({\n          basemap: \"satellite\"\n        });\n\n        var view = new SceneView({\n          container: \"viewDiv\",\n          map: map,\n          constraints: {\n            altitude: {\n              max: 12000000000 // meters\n            }\n          },\n\n          popup: {\n            dockEnabled: true,\n            dockOptions: {\n              breakpoint: false\n            }\n          }\n        });\n\n        view.popup.watch(\"selectedFeature\", function() {\n          satelliteTracks.removeAll();\n        });\n\n        view.popup.on(\"trigger-action\", function(event) {\n          if (event.action.id === \"track\") {\n            var graphic = view.popup.selectedFeature;\n            var trackFeatures = [];\n\n            for (var i = 0; i < 60 * 24; i++) {\n              var loc = null;\n              try {\n                loc = getSatelliteLocation(\n                  new Date(graphic.attributes.time + i * 1000 * 60),\n                  graphic.attributes.line1,\n                  graphic.attributes.line2\n                );\n              } catch (error) {}\n\n              if (loc !== null) {\n                trackFeatures.push([loc.x, loc.y, loc.z]);\n              }\n            }\n\n            var track = new Graphic({\n              geometry: {\n                type: \"polyline\", // autocasts as new Polyline()\n                paths: [trackFeatures]\n              },\n              symbol: {\n                type: \"line-3d\", // autocasts as new LineSymbol3D()\n                symbolLayers: [\n                  {\n                    type: \"line\", // autocasts as new LineSymbol3DLayer()\n                    material: {\n                      color: [192, 192, 192, 0.5]\n                    },\n                    size: 3\n                  }\n                ]\n              }\n            });\n\n            satelliteTracks.add(track);\n          }\n        });\n\n        var satelliteLayer = new GraphicsLayer();\n        var satelliteTracks = new GraphicsLayer();\n\n        map.addMany([satelliteLayer, satelliteTracks]);\n\n        // Parse the satellite TLE data\n        var lines = data.split(\"\\n\");\n        var count = (lines.length / 3).toFixed(0);\n\n        for (var i = 0; i < count; i++) {\n          var commonName = lines[i * 3 + 0];\n          var line1 = lines[i * 3 + 1];\n          var line2 = lines[i * 3 + 2];\n          var time = Date.now();\n          var designator = line1.substring(9, 16);\n          var launchYear = designator.substring(0, 2);\n          launchYear =\n            Number(launchYear) >= 57 ? \"19\" + launchYear : \"20\" + launchYear;\n          var launchNum = Number(designator.substring(2, 5)).toString();\n          var noradId = Number(line1.substring(3, 7));\n          var satelliteLoc = null;\n\n          try {\n            satelliteLoc = getSatelliteLocation(new Date(time), line1, line2);\n          } catch (error) {}\n\n          if (satelliteLoc !== null) {\n            var template = {\n              // autocasts as new PopupTemplate()\n              title: \"{name}\",\n              content: \"Launch number {number} of {year}\",\n              actions: [\n                {\n                  // Create a popup action to display the satellite track.\n                  title: \"Show Satellite Track\",\n                  id: \"track\",\n                  className: \"esri-icon-globe\"\n                }\n              ]\n            };\n\n            var graphic = new Graphic({\n              geometry: satelliteLoc,\n              symbol: {\n                type: \"picture-marker\", // autocasts as new PictureMarkerSymbol()\n                url:\n                  \"https://developers.arcgis.com/javascript/latest/sample-code/satellites-3d/live/satellite.png\",\n                width: 48,\n                height: 48\n              },\n              attributes: {\n                name: commonName,\n                year: launchYear,\n                id: noradId,\n                number: launchNum,\n                time: time,\n                line1: line1,\n                line2: line2\n              },\n              popupTemplate: template\n            });\n\n            satelliteLayer.add(graphic);\n          }\n        }\n\n        function getSatelliteLocation(date, line1, line2) {\n          var satrec = satellite.twoline2satrec(line1, line2);\n          var position_and_velocity = satellite.propagate(\n            satrec,\n            date.getUTCFullYear(),\n            date.getUTCMonth() + 1,\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds()\n          );\n          var position_eci = position_and_velocity.position;\n\n          var gmst = satellite.gstime_from_date(\n            date.getUTCFullYear(),\n            date.getUTCMonth() + 1,\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds()\n          );\n\n          var position_gd = satellite.eci_to_geodetic(position_eci, gmst);\n\n          var longitude = position_gd.longitude;\n          var latitude = position_gd.latitude;\n          var height = position_gd.height;\n          if (isNaN(longitude) || isNaN(latitude) || isNaN(height)) {\n            return null;\n          }\n          var rad2deg = 180 / Math.PI;\n          while (longitude < -Math.PI) {\n            longitude += 2 * Math.PI;\n          }\n          while (longitude > Math.PI) {\n            longitude -= 2 * Math.PI;\n          }\n          return {\n            type: \"point\", // Autocasts as new Point()\n            x: rad2deg * longitude,\n            y: rad2deg * latitude,\n            z: height * 1000\n          };\n        }\n      });\n    }\n}\nexport default EarthView;\n"]},"metadata":{},"sourceType":"module"}