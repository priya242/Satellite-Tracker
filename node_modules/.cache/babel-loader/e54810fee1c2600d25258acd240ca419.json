{"ast":null,"code":"var _jsxFileName = \"/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js\";\nimport React from \"react\";\nimport \"./style.css\"; //import { render } from \"react-dom\";\n//import Header from \"./components/Header\"\n//import Main from \"./components/Main\"\n//import Footer  from \"./components/Footer\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      urls: [],\n      satellites: [],\n      category: [],\n      isLoaded: false\n    };\n  }\n\n  fetchData() {\n    const url = \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n    const urls = this.loadSat();\n    Promise.all([fetch(url).then(response => response.json()), urls.map(url => fetch(url).then(responses => responses.json()))]).then(data => {\n      //  return data;\n      console.log(data);\n    }).then(data => {\n      this.setState({\n        nasa: data[0].collection.items[1].href,\n        satellites: data[1],\n        category: data[1],\n        isLoaded: true\n      });\n    }); // .catch((error) = console.log(error));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat() {\n    let urls = [];\n\n    for (let id = 1; id <= 10; id++) {\n      let url1 = \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" + id + \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1);\n    }\n\n    return urls; //console.log(urls)\n  } //data = {category:count}\n  //const url1 = 'https://uphere-space1.p.rapidapi.com/satellite/list?country=IND&page=1';\n\n\n  render() {\n    const {\n      nasa,\n      satellites,\n      category,\n      isLoaded\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Satellite Tracker\"), !isLoaded && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      controls: true,\n      muted: true,\n      loop: true,\n      src: nasa,\n      type: \"video/mp4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"Satellite Count\"), \" =\", satellites.map(satellites => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 39\n      }\n    }, satellites.info)), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Category\"), \" =\", category.map(category => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 35\n      }\n    }, category.names)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankapandey/Satellite-Tracker/my-app/src/App.js"],"names":["React","App","Component","constructor","props","state","nasa","urls","satellites","category","isLoaded","fetchData","url","loadSat","Promise","all","fetch","then","response","json","map","responses","data","console","log","setState","collection","items","href","componentDidMount","id","url1","push","render","info","names"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n//import { render } from \"react-dom\";\n//import Header from \"./components/Header\"\n//import Main from \"./components/Main\"\n//import Footer  from \"./components/Footer\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nasa: [],\n      urls: [],\n      satellites: [],\n      category: [],\n      isLoaded: false,\n    };\n  }\n  fetchData() {\n   const url  =  \"https://images-api.nasa.gov/asset/ISS%204K%20Crew%20Earth%20Observations\";\n   const urls = this.loadSat();\n\n   Promise.all([\n      fetch(url).then((response) => response.json()),\n      urls.map(url => fetch(url)\n      .then((responses) => responses.json())\n\n     )\n         \n    ])\n      .then((data) => {\n     //  return data;\n       console.log(data);\n        })\n\n      .then((data) => {\n        this.setState({\n         nasa: data[0].collection.items[1].href,\n         satellites: data[1],\n        category: data[1],\n        isLoaded: true,\n        });\n      });\n    // .catch((error) = console.log(error));\n\n  }\n\n  \n\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  loadSat(){\n    let urls =[]\n    for (let id = 1; id <= 10; id++) {\n      let url1 =\n        \"https://www.n2yo.com/rest/v1/satellite/above/41.702/-76.014/0/70/\" +\n        id +\n        \"/&apiKey=TY7W6H-2YWZWQ-9W9WEL-4FIH\";\n      urls.push(url1); \n    }\n    return urls;\n    //console.log(urls)\n  }\n  //data = {category:count}\n  //const url1 = 'https://uphere-space1.p.rapidapi.com/satellite/list?country=IND&page=1';\n\n  render() {\n    const { nasa, satellites, category, isLoaded } = this.state;\n    return (\n      <React.Fragment>\n        <h1>Satellite Tracker</h1>\n        {!isLoaded && <p>Loading...</p>}\n\n        <video autoPlay controls muted loop src={nasa} type=\"video/mp4\" />\n\n        <h3>Satellite Count</h3> =\n        {satellites.map(satellites => <div>{satellites.info}</div>)}\n        <h3>Category</h3> =\n        {category.map(category => <div>{category.names}</div>)}\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}